Parameters:
  ProjectName:
    Type: String
    Description: Name of the project this belongs to
  VPCStackName:
    Type: String
    Description: The name of the VPC Stack
  DataLakeStackName:
    Type: String
    Description: The export name of the DataLake Stack
  Region:
    Type: String
    Description: Region
  ModuleName:
    Type: String
    Description: Module Name
  ApplicationPort:
    Type: String
    Description: The Application's natural port

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !Sub "arn:aws:iam::${AWS::AccountId}:policy/DeveloperBoundary"
      RoleName: !Ref ModuleName
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Module
          Value: !Ref ModuleName
      AssumeRolePolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Sid": "",
            "Effect": "Allow",
            "Principal": {
              "Service": "ec2.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
          ]
        }
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Policies:
        - PolicyName: !Sub "${ModuleName}ECRPull"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                Resource:
                  - !Sub "arn:aws:ecr:eu-central-1:${AWS::AccountId}:repository/${ModuleName}"
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                Resource:
                  - "*"
        - PolicyName: !Sub "${ModuleName}ReadDataLake"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - Fn::ImportValue:
                      !Sub "${DataLakeStackName}-Arn"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - Fn::Join:
                      - ""
                      - - Fn::ImportValue:
                            !Sub "${DataLakeStackName}-Arn"
                        - "/*"
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole
  Instance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Join ['', [!Ref 'Region', 'a']]
      ImageId: ami-0c115dbd34c69a004
      InstanceType: "t3.small"
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId:
        Fn::ImportValue:
          !Join ['-', [!Ref 'VPCStackName', 'PrivateSubnet1']]
      Tags:
        - Key: "Name"
          Value: !Join ['-', [!Ref 'ProjectName', !Ref 'ModuleName']]
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            set -ex

            sudo mkdir /root/.docker
            sudo bash -c 'cat > /root/.docker/config.json' << EOF
            {
              "credsStore": "ecr-login"
            }
            EOF

            sudo amazon-linux-extras enable docker
            sudo yum install -y docker amazon-ecr-credential-helper jq
            sudo service docker start

            docker run -d -p 80:${ApplicationPort} \
              -e "AWS_DEFAULT_REGION=${Region}" \
              -e "DATALAKE=${DataLakeArn}" \
              "$(curl http://169.254.169.254/latest/dynamic/instance-identity/document | jq .accountId -r).dkr.ecr.eu-central-1.amazonaws.com/${ModuleName}"
          - DataLakeArn:
              Fn::ImportValue:
                !Join ['-', [!Ref 'DataLakeStackName', 'Arn']]
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId:
        Fn::ImportValue:
          !Join ['-', [!Ref 'VPCStackName', 'HostedZoneID']]
      Comment: !Sub "DNS record for ${ProjectName} ${ModuleName}"
      Name: !Sub "${ModuleName}.sars-cov2.local"
      Type: A
      TTL: '900'
      ResourceRecords:
        - !GetAtt Instance.PrivateIp
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic out
      VpcId:
        Fn::ImportValue:
          !Join ['-', [!Ref 'VPCStackName', 'VPC']]
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
Outputs:
  DNSRecordName:
    Description: The DNS Record Name that the service can be reached at
    Value: !Ref DNSRecord
    Export:
      Name: !Sub '${AWS::StackName}-DNSRecord'